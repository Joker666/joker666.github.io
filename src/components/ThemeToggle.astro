---

---

<div class="relative">
    <button id="theme-toggle" class="flex items-center justify-center gap-2 px-3 py-2 rounded-lg" aria-label="Select theme">
        <svg class="w-4 h-4 fill-current" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
            <circle cx="8" cy="8" r="8"></circle>
        </svg>
        <span class="theme-text">Theme</span>
    </button>
    <div id="theme-dropdown" class="hidden absolute right-0 mt-2 py-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700">
        <button class="theme-option w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700" data-theme="light">
            Light
        </button>
        <button class="theme-option w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700" data-theme="dark">
            Dark
        </button>
        <button class="theme-option w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700" data-theme="system">
            System
        </button>
    </div>
</div>

<script>
    document.addEventListener('astro:page-load', () => {
        const getSystemTheme = () => {
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        };

        const theme = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
                return localStorage.getItem('theme') || 'system';
            }
            return 'system';
        })();

        const updateTheme = (newTheme: string) => {
            const resolvedTheme = newTheme === 'system' ? getSystemTheme() : newTheme;

            if (resolvedTheme === 'dark') {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }

            localStorage.setItem('theme', newTheme);
        };

        // Initial theme setup
        updateTheme(theme);

        // Toggle dropdown
        const toggleBtn = document.getElementById('theme-toggle');
        const dropdown = document.getElementById('theme-dropdown');

        toggleBtn?.addEventListener('click', () => {
            dropdown?.classList.toggle('hidden');
        });

        // Handle theme options
        document.querySelectorAll('.theme-option').forEach(option => {
            option.addEventListener('click', (e) => {
                const newTheme = (e.currentTarget as HTMLElement).dataset.theme;
                if (newTheme) {
                    updateTheme(newTheme);
                    dropdown?.classList.add('hidden');
                }
            });
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!toggleBtn?.contains(e.target as Node) && !dropdown?.contains(e.target as Node)) {
                dropdown?.classList.add('hidden');
            }
        });

        // Listen for system theme changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            if (localStorage.getItem('theme') === 'system') {
                updateTheme('system');
            }
        });
    });
</script>

<script>
    document.addEventListener('astro:after-swap', () => {
        const theme = localStorage.getItem('theme');
        if (theme === 'dark' || (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        }
    });
</script>
